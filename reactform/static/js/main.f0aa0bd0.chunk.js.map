{"version":3,"sources":["App/SignIn.jsx","App/Validation.js","App/SignUp.jsx","App/Users.js","App/Logged.jsx","App/App.jsx","serviceWorker.js","index.js"],"names":["SignIn","props","className","type","name","placeholder","value","this","login","onChange","password","onClick","onClickChangeForm","React","Component","validateEmail","SignUp","email","secondPassword","users","checkCompatibility","result","filter","user","Logged","App","handleLoginAndPasswordChange","e","setState","target","clearStateForm","changeForm","prevState","isLoginForm","changeLoginStatus","isLogged","displayFormData","state","alert","push","answer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0aa0bd0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass SignIn extends React.Component {\r\n  render(props) {\r\n    return (\r\n      <div className=\"form-container\">\r\n        <h2>Login to Account</h2>\r\n        <input\r\n            type=\"text\"\r\n            name=\"login\"\r\n            className=\"form-input\"\r\n            placeholder=\"Enter login\"\r\n            value={this.props.login}\r\n            onChange={this.props.onChange}\r\n        />\r\n        <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            className=\"form-input\"\r\n            placeholder=\"Enter password\"\r\n            value={this.props.password}\r\n            onChange={this.props.onChange}\r\n        />\r\n        <label className=\"remember-container\">\r\n            <input type=\"checkbox\" name=\"checkbox\" value=\"value\" />\r\n            Remember me\r\n        </label>\r\n\r\n        <button className=\"submit-btn\" onClick={this.props.onClick}>\r\n            Sign In\r\n        </button>\r\n        <p>\r\n          Don't have an account?{\" \"}\r\n          <span className=\"go-to-sign-link\" onClick={this.props.onClickChangeForm}>\r\n            Sign Up\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignIn;\r\n","function validateEmail(email){\r\n    var re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport default validateEmail","import React from \"react\";\r\nimport validateEmail from \"./Validation\";\r\n\r\nclass SignUp extends React.Component {\r\n  render(props) { \r\n\r\n    return (\r\n      <div className=\"form-container\">\r\n        <h2>Create new Account</h2>\r\n        <input\r\n            type=\"text\"\r\n            name=\"login\"\r\n            className= \"form-input\"\r\n            placeholder=\"Enter login\"\r\n            value = {this.props.login}\r\n            onChange = {this.props.onChange}\r\n        />\r\n\r\n        <input \r\n            type=\"text\" \r\n            name=\"email\"\r\n            className = \"form-input\"\r\n            placeholder=\"Enter email\" \r\n            value = {this.props.email}\r\n            onChange = {this.props.onChange}\r\n        />\r\n\r\n        <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            className=\"form-input\"\r\n            placeholder=\"Enter password\"\r\n            value = {this.props.password}\r\n            onChange = {this.props.onChange}\r\n        />\r\n\r\n        <input\r\n            type=\"password\"\r\n            name=\"secondPassword\"\r\n            className=\"form-input\"\r\n            placeholder=\"Confirm password\"\r\n            value = {this.props.secondPassword}\r\n            onChange = {this.props.onChange}\r\n        />\r\n\r\n        <button className=\"submit-btn\"\r\n            onClick = {this.props.onClick}\r\n        >\r\n                \r\n                Sign Up\r\n        </button>\r\n       \r\n        <p>\r\n            Already have an account?{\" \"}\r\n            <span \r\n                className=\"go-to-sign-link\" \r\n                onClick={this.props.onClickChangeForm}>\r\n                Sign In\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default SignUp;\r\n","const users = [\r\n    {\r\n        login: \"volfen\",\r\n        email: \"volfen27@gmail.com\",\r\n        password: \"qwerty\"\r\n    },\r\n]\r\n\r\nfunction addUser (login, email, password) {\r\n    users.push({\r\n        login,\r\n        password,\r\n        email\r\n    })\r\n}\r\n\r\nfunction checkCompatibility(login, password, email = \"\") {\r\n    let result\r\n    if(email === \"\"){\r\n        users.filter(user => {\r\n            return result = (user.login === login && user.password === password) ? true : false \r\n        })\r\n    }else{\r\n        users.filter(user => {\r\n            return result = (user.login === login || user.email === email) ? false : true \r\n        })\r\n    }\r\n    return result\r\n}\r\nexport { users, addUser, checkCompatibility };\r\n\r\n\r\n// export default {\r\n//     users: [],\r\n//     getdupa: function () {\r\n//         this.users\r\n//     }\r\n// }\r\n\r\n// export default class {\r\n//     static users = []\r\n\r\n//     getdupa = () => {\r\n//         this.users\r\n//     }\r\n// }","import React from \"react\"\r\n\r\nfunction Logged(props) {\r\n    return(\r\n        <div>\r\n            <h1>Welcome <span>{props.login}</span></h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logged","import React from \"react\"\r\nimport SignIn from \"./SignIn.jsx\"\r\nimport SignUp from \"./SignUp.jsx\"\r\nimport { users, addUser, checkCompatibility } from \"./Users.js\"\r\nimport Logged from \"./Logged.jsx\"\r\nimport validateEmail from \"./Validation.js\"\r\n\r\nclass App extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isLoginForm: true,\r\n            isLogged: false,\r\n            login: \"\",\r\n            password: \"\",\r\n            secondPassword: \"\",\r\n            email: \"\"\r\n        }\r\n    }\r\n\r\n    handleLoginAndPasswordChange = (e) => {\r\n         this.setState(\r\n            {\r\n                [e.target.name]: e.target.value\r\n            }\r\n         )\r\n    }\r\n\r\n    clearStateForm = (e) => {\r\n        this.setState(\r\n            {\r\n                login: \"\",\r\n                email: \"\",\r\n                password: \"\",\r\n                secondPassword: \"\"\r\n            }\r\n        )\r\n    }\r\n\r\n    changeForm = (e) => {\r\n        this.setState(prevState => ({\r\n            isLoginForm: !prevState.isLoginForm\r\n        }));\r\n        this.clearStateForm()\r\n    }\r\n\r\n    changeLoginStatus = (e) => {\r\n        this.setState(prevState => ({\r\n            isLogged: !prevState.isLogged\r\n        }));\r\n    }\r\n\r\n    displayFormData = (e) => {\r\n        if(this.state.isLoginForm){\r\n            if(checkCompatibility(this.state.login, this.state.password)) {\r\n                alert(\"Congratulation\")\r\n                this.changeLoginStatus()\r\n            }\r\n        }else {\r\n            if(checkCompatibility(this.state.login, this.state.password, this.state.email)) {\r\n                addUser(this.state.login,this.state.email,this.state.password)\r\n                this.changeForm()\r\n            }  \r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n                <div className=\"main\">\r\n                    {\r\n\r\n                    !this.state.isLogged ?\r\n                        this.state.isLoginForm ? \r\n                            <SignIn \r\n                                placeholder = {this.state.answer}\r\n                                login = {this.state.login}\r\n                                password = {this.state.password}\r\n                                onChange = {this.handleLoginAndPasswordChange}\r\n                                onClick = {this.displayFormData}\r\n                                onClickChangeForm = {this.changeForm}\r\n                            /> :\r\n                            <SignUp \r\n                                login = {this.state.login}\r\n                                email = {this.state.email}\r\n                                password = {this.state.password}\r\n                                secondPassword = {this.state.secondPassword}\r\n                                onChange = {this.handleLoginAndPasswordChange}\r\n                                onClick = {this.displayFormData}\r\n                                onClickChangeForm = {this.changeForm}/>\r\n                    :\r\n                    <Logged login = {this.state.login}/>\r\n                    }\r\n                </div>\r\n            );\r\n    }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App/index.css';\r\nimport App from './App/App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render\r\n            (\r\n            <App />,\r\n            document.getElementById(\"root\")\r\n            )\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}